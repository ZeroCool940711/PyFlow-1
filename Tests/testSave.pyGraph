{
  "root": {
    "nodes": [
      {
        "inputs": [], 
        "meta": {
          "var": {}, 
          "label": ""
        }, 
        "name": "__scene_outputs__", 
        "outputs": [], 
        "y": -672.2527720037428, 
        "x": 44.17882396075129, 
        "computeCode": "def compute(self):\n    '''\n    node calculations here\n    '''\n    # getting data from inputs\n    # do stuff\n    # write data to outputs\n    return\n", 
        "type": "scene_outputs", 
        "uuid": "1a274230-44b6-45c9-9e31-51bbb3333e4e"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": true, 
            "name": "dagPath", 
            "deletable": false, 
            "dataType": 3, 
            "editable": false, 
            "curr_dataType": 3, 
            "bLabelHidden": false, 
            "value": "", 
            "uuid": "64c52e3a-5a9c-4690-a0bf-201f0d3ac364"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "GetPointPositions"
        }, 
        "name": "GetPointPositions", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": true, 
            "name": "PointPosition", 
            "deletable": false, 
            "dataType": 5, 
            "editable": false, 
            "curr_dataType": 5, 
            "bLabelHidden": false, 
            "value": [], 
            "uuid": "735546f4-cf34-45c1-aba5-1fa1c8460d42"
          }
        ], 
        "y": -317.34405015746466, 
        "x": -721.0784149515679, 
        "computeCode": "import maya.OpenMaya as OpenMaya\n\nselList=OpenMaya.MSelectionList()\nselList.add(self.dagPath.getData())\ndagPath = OpenMaya.MDagPath()\nselList.getDagPath( 0, dagPath )\n\n# put each point to a list\npointList = []\n\ninmeshVertexItr = OpenMaya.MItMeshVertex( dagPath )\ni = 0\nwhile not inmeshVertexItr.isDone():\n\tpos = inmeshVertexItr.position(OpenMaya.MSpace.kWorld)\n\tpointList.append([pos.x,pos.y,pos.z])\n\tinmeshVertexItr.next()\n\ti+=1\n\nself.PointPosition.setData(pointList)", 
        "type": "pythonNode", 
        "uuid": "54a42e7a-55c6-4655-94f6-8d0034902055"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "dagPath", 
            "deletable": false, 
            "dataType": 3, 
            "editable": false, 
            "curr_dataType": 3, 
            "bLabelHidden": false, 
            "value": "pCube1", 
            "uuid": "69d420a1-5652-428b-9d38-282eb3c4b357"
          }, 
          {
            "direction": 0, 
            "bDirty": true, 
            "name": "pointIndex", 
            "deletable": false, 
            "dataType": 2, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "f657f162-d783-448b-969f-d2ae828a7886"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "GetPointPosition"
        }, 
        "name": "GetPointPosition", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": false, 
            "name": "pos_1", 
            "deletable": false, 
            "dataType": 8, 
            "editable": false, 
            "curr_dataType": 8, 
            "bLabelHidden": false, 
            "value": [
              -0.5, 
              -0.5, 
              0.5
            ], 
            "uuid": "a5738f46-0804-45a7-8eee-05c85987106a"
          }
        ], 
        "y": -418.8175801084038, 
        "x": -688.8456466142109, 
        "computeCode": "import maya.OpenMaya as OpenMaya\n\nselList=OpenMaya.MSelectionList()\nselList.add(self.dagPath.getData())\ndagPath = OpenMaya.MDagPath()\nselList.getDagPath( 0, dagPath )\n\n# put each point to a list\n\n\ninMeshMPointArray = OpenMaya.MPointArray()\n# create function set and get points in world space\ncurrentInMeshMFnMesh = OpenMaya.MFnMesh(dagPath)\ncurrentInMeshMFnMesh.getPoints(inMeshMPointArray, OpenMaya.MSpace.kWorld)\n\n#print point\nself.pos_1.setData([inMeshMPointArray[self.pointIndex.getData()][0], inMeshMPointArray[self.pointIndex.getData()][1], inMeshMPointArray[self.pointIndex.getData()][2]])", 
        "type": "pythonNode", 
        "uuid": "b48098b2-e9df-430d-97c7-6d597038f610"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "entity", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 8, 
            "bLabelHidden": false, 
            "value": [
              -0.5, 
              -0.5, 
              0.5
            ], 
            "uuid": "2f81ce93-8c93-45c3-abd3-30f4f4e2c4bc"
          }, 
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "inExec", 
            "deletable": false, 
            "dataType": 6, 
            "editable": false, 
            "curr_dataType": 6, 
            "bLabelHidden": true, 
            "value": null, 
            "uuid": "15eb79d3-6ac1-4b7f-b9e9-db53e78c580b"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "pyprint"
        }, 
        "name": "pyprint", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": false, 
            "name": "outExec", 
            "deletable": false, 
            "dataType": 6, 
            "editable": false, 
            "curr_dataType": 6, 
            "bLabelHidden": true, 
            "value": null, 
            "uuid": "a00b8fdc-870e-43b9-be69-3d90919ee4ab"
          }
        ], 
        "y": -577.9789009257324, 
        "x": -515.7663743234323, 
        "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref.setData\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", 
        "type": "pyprint", 
        "uuid": "d93be8e2-b892-4129-be02-249fef9ae185"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "dagPath", 
            "deletable": false, 
            "dataType": 3, 
            "editable": false, 
            "curr_dataType": 3, 
            "bLabelHidden": false, 
            "value": "pCube1", 
            "uuid": "e7296781-d195-4644-bd43-21850051db7a"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "GetNumVertex"
        }, 
        "name": "GetNumVertex", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": false, 
            "name": "NbPoints", 
            "deletable": false, 
            "dataType": 2, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 8, 
            "uuid": "1b9d37e6-e6eb-4ad0-b0a7-8e775bd5e618"
          }
        ], 
        "y": -515.4762507534825, 
        "x": -793.9411846812809, 
        "computeCode": "import maya.OpenMaya as OpenMaya\n\nselList=OpenMaya.MSelectionList()\nselList.add(self.dagPath.getData())\ndagPath = OpenMaya.MDagPath()\nselList.getDagPath( 0, dagPath )\n\n# put each point to a list\n\nmesh = OpenMaya.MFnMesh(dagPath)\n\n\nself.NbPoints.setData(mesh.numVertices())", 
        "type": "pythonNode", 
        "uuid": "92d42802-020d-4e5a-ba55-fa3160e08146"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "s", 
            "deletable": false, 
            "dataType": 3, 
            "editable": false, 
            "curr_dataType": 3, 
            "bLabelHidden": false, 
            "value": "pCube1", 
            "uuid": "ff4be03a-556d-4857-af0e-94782c6f11e6"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "makeString"
        }, 
        "name": "makeString", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": false, 
            "name": "out", 
            "deletable": false, 
            "dataType": 3, 
            "editable": false, 
            "curr_dataType": 3, 
            "bLabelHidden": false, 
            "value": "pCube1", 
            "uuid": "e0002583-a428-46cd-ba2c-f8c9ffc0ddde"
          }
        ], 
        "y": -419.0259883856425, 
        "x": -810.3926338618538, 
        "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref.setData\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", 
        "type": "makeString", 
        "uuid": "a3a3bea7-e349-4007-80b4-284092668b07"
      }, 
      {
        "inputs": [], 
        "meta": {
          "var": {}, 
          "label": ""
        }, 
        "name": "__scene_inputs__", 
        "outputs": [], 
        "y": -672.2527720037428, 
        "x": -851.1838453531713, 
        "computeCode": "def compute(self):\n    '''\n    node calculations here\n    '''\n    # getting data from inputs\n    # do stuff\n    # write data to outputs\n    return\n", 
        "type": "scene_inputs", 
        "uuid": "2ffc869d-235c-430c-b3b1-a7ee579580e6"
      }
    ], 
    "edges": [
      {
        "sourceName": "makeString.out", 
        "sourceUUID": "e0002583-a428-46cd-ba2c-f8c9ffc0ddde", 
        "destinationName": "GetPointPosition.dagPath", 
        "destinationUUID": "69d420a1-5652-428b-9d38-282eb3c4b357", 
        "uuid": "078cd9f4-f508-4df0-9b57-791b3e4a9286"
      }, 
      {
        "sourceName": "GetPointPosition.pos_1", 
        "sourceUUID": "a5738f46-0804-45a7-8eee-05c85987106a", 
        "destinationName": "pyprint.entity", 
        "destinationUUID": "2f81ce93-8c93-45c3-abd3-30f4f4e2c4bc", 
        "uuid": "bfe1ebc9-2759-4a9a-952a-b306df0eb4e1"
      }
    ], 
    "variables": []
  }
}