{
  "root": {
    "nodes": [
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "i", 
            "deletable": false, 
            "dataType": 2, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "73439f22-a183-4394-b0fb-9ac47363368b"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "makeInt"
        }, 
        "name": "makeInt", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": true, 
            "name": "out", 
            "deletable": false, 
            "dataType": 2, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "0c53731d-4c66-4d76-8fd5-ce172ab38c86"
          }
        ], 
        "y": -185.0, 
        "x": -405.0, 
        "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref.setData\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", 
        "type": "makeInt", 
        "uuid": "1e923b61-8dd9-44d7-85f5-2daa9895919f"
      }, 
      {
        "inputs": [], 
        "meta": {
          "var": {}, 
          "label": ""
        }, 
        "name": "__scene_outputs__", 
        "outputs": [], 
        "y": -442.0, 
        "x": 626.0, 
        "computeCode": "def compute(self):\n    '''\n    node calculations here\n    '''\n    # getting data from inputs\n    # do stuff\n    # write data to outputs\n    return\n", 
        "type": "scene_outputs", 
        "uuid": "c106b497-528a-48be-9895-1d2eb5d4b422"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": true, 
            "name": "a", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "772268fd-b3e4-4a44-8478-140519bbbeb4"
          }, 
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "b", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "8d1d2a0a-e34a-4341-a0db-0d976ffa377f"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "add"
        }, 
        "name": "add", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": true, 
            "name": "out", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "684489b8-7256-47c0-8d65-e7ca927e60fe"
          }
        ], 
        "y": -143.0, 
        "x": -312.0, 
        "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref.setData\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", 
        "type": "add", 
        "uuid": "5bd280f2-64b8-4df9-ad4d-41bb197b28e5"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": true, 
            "name": "a", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "74d89a7a-1cb5-4729-a683-c557cc3ce8d8"
          }, 
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "b", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "9e4f9853-8b26-41d5-9faf-a5e4ea328e0c"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "add"
        }, 
        "name": "add1", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": true, 
            "name": "out", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "3d8e249c-6b7b-48f3-852d-6f66a1668334"
          }
        ], 
        "y": -144.0, 
        "x": -208.0, 
        "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref.setData\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", 
        "type": "add", 
        "uuid": "13715305-83c4-4379-979a-1b95affa7878"
      }, 
      {
        "inputs": [], 
        "meta": {
          "var": {}, 
          "label": ""
        }, 
        "name": "__scene_inputs__", 
        "outputs": [], 
        "y": -442.0, 
        "x": -671.0, 
        "computeCode": "def compute(self):\n    '''\n    node calculations here\n    '''\n    # getting data from inputs\n    # do stuff\n    # write data to outputs\n    return\n", 
        "type": "scene_inputs", 
        "uuid": "8a34748c-04bf-40c6-86eb-83409d09f7fb"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "f", 
            "deletable": false, 
            "dataType": 1, 
            "editable": false, 
            "curr_dataType": 1, 
            "bLabelHidden": false, 
            "value": 0.0, 
            "uuid": "886ac51c-f018-4c65-a826-6d162b498e86"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "makeFloat"
        }, 
        "name": "makeFloat", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": true, 
            "name": "out", 
            "deletable": false, 
            "dataType": 1, 
            "editable": false, 
            "curr_dataType": 1, 
            "bLabelHidden": false, 
            "value": 0.0, 
            "uuid": "bb430b99-d80b-4f35-bad1-7d1551f51c36"
          }
        ], 
        "y": -88.0, 
        "x": -417.0, 
        "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref.setData\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", 
        "type": "makeFloat", 
        "uuid": "edae3012-c0cb-46f3-81ea-3636c3b41071"
      }, 
      {
        "inputs": [
          {
            "direction": 0, 
            "bDirty": true, 
            "name": "a", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "8b2904ee-0b5e-40ad-ac21-b37975bf15f9"
          }, 
          {
            "direction": 0, 
            "bDirty": false, 
            "name": "b", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "4a8cc5d1-24ef-424f-a756-cef562284c66"
          }
        ], 
        "meta": {
          "var": {}, 
          "label": "add"
        }, 
        "name": "add2", 
        "outputs": [
          {
            "direction": 1, 
            "bDirty": true, 
            "name": "out", 
            "deletable": false, 
            "dataType": 0, 
            "editable": false, 
            "curr_dataType": 2, 
            "bLabelHidden": false, 
            "value": 0, 
            "uuid": "7fd7e94a-bff5-4efe-8f2e-e24e95faa105"
          }
        ], 
        "y": -121.0, 
        "x": -63.0, 
        "computeCode": "def compute(self):\n    # arguments will be taken from inputs\n    kwargs = {}\n    for i in self.inputs.values():\n        if i.dataType is not DataTypes.Exec:\n            kwargs[i.name] = i.getData()\n    for ref in refs:\n        if ref.dataType is not DataTypes.Exec:\n            kwargs[ref.name] = ref.setData\n    result = foo(**kwargs)\n    if returnType is not None:\n        self.setData('out', result)\n    if nodeType == NodeTypes.Callable:\n        outExec.call()\n", 
        "type": "add", 
        "uuid": "3587a49e-5f51-411c-8300-ca9071868d6f"
      }
    ], 
    "edges": [
      {
        "sourceName": "add.out", 
        "sourceUUID": "684489b8-7256-47c0-8d65-e7ca927e60fe", 
        "destinationName": "add1.a", 
        "destinationUUID": "74d89a7a-1cb5-4729-a683-c557cc3ce8d8", 
        "uuid": "15e17dd7-229f-40e5-b612-f0523aa253f1"
      }, 
      {
        "sourceName": "makeInt.out", 
        "sourceUUID": "0c53731d-4c66-4d76-8fd5-ce172ab38c86", 
        "destinationName": "add.a", 
        "destinationUUID": "772268fd-b3e4-4a44-8478-140519bbbeb4", 
        "uuid": "7b53c4c7-cb7c-41bd-b644-ea3b5174b08a"
      }, 
      {
        "sourceName": "makeFloat.out", 
        "sourceUUID": "bb430b99-d80b-4f35-bad1-7d1551f51c36", 
        "destinationName": "add.b", 
        "destinationUUID": "8d1d2a0a-e34a-4341-a0db-0d976ffa377f", 
        "uuid": "a9e0cbc6-136f-40ef-8a91-430349b0d695"
      }, 
      {
        "sourceName": "add1.out", 
        "sourceUUID": "3d8e249c-6b7b-48f3-852d-6f66a1668334", 
        "destinationName": "add2.a", 
        "destinationUUID": "8b2904ee-0b5e-40ad-ac21-b37975bf15f9", 
        "uuid": "c37ac71d-c202-4f9b-89aa-52b22d8c71ae"
      }
    ], 
    "variables": []
  }
}